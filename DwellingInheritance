/**
* Program that implements classes for different kinds of dwellings.
* Shows how to:
* Create class hierarchy, variables and functions with inheritance,
* abstract class, overriding, and private vs. public variables.
*/

import kotlin.math.*

fun main() {
    val squareCabin = SquareCabin(6, 50.0)
    val roundHut = RoundHut(3, 10.0)
   	val roundTower = RoundTower(4, 15.5)
   	
    with(squareCabin) {
        println("\nSquare Cabin\n============")
        println("Capacity: ${capacity}")
        println("Material: ${buildingMaterial}")
        println("Has Room? ${hasRoom()}")
        println("Floor Area: ${floorArea()}")
    }
        
    with(roundHut) {
        println("\nRound Hut\n=========")
        println("Material: ${buildingMaterial}")
        println("Capacity: ${capacity}")
        println("Has room? ${hasRoom()}")
        println("Floor Area: ${floorArea()}")
        println("Has room? ${hasRoom()}")
		getRoom()
		println("Has room? ${hasRoom()}")
		getRoom()
        println("Carpet size: ${calculateMaxCarpetSize()}")
	}
        
    with(roundTower) {
        println("\nRound Tower\n===========")
        println("Material: @{buildingMaterial}")
        println("Capacity: ${capacity}")
        println("Has room? ${hasRoom()}")
        println("Floor Area: ${floorArea()}")
        println("Floor area: %.2f".format(floorArea()))
        println("Carpet size: ${calculateMaxCarpetSize()}")
    }
}

abstract class Dwelling(private var residents: Int) {
    abstract val buildingMaterial: String
    abstract val capacity: Int
    
    fun hasRoom(): Boolean {
        return capacity > residents
    }
    
    abstract fun floorArea(): Double
    
    fun getRoom() {
        if (residents < capacity ) {
            residents++
            println("You got a room!")
        } else {
            println("Sorry at capacity. No rooms left!")
        }
    }
}

class SquareCabin(val residents: Int, val length : Double) : Dwelling(residents) {
    override val buildingMaterial = "Wood"
    override val capacity = 6
    
    override fun floorArea(): Double {
        return length * length
    }
}

open class RoundHut(val residents: Int, val radius: Double): Dwelling(residents) {
    override val buildingMaterial = "Straw"
    override val capacity = 4
    
    override fun floorArea(): Double {
        return PI * radius * radius
    }
    
    fun calculateMaxCarpetSize(): Double {
        val diameter = 2 * radius
        return sqrt (diameter * diameter / 2)
    }
}

class RoundTower(
    residents: Int,
    radius: Double,
	val floors: Int = 2): RoundHut(residents, radius) {
    
    override val buildingMaterial ="Stone"
    override val capacity = 4 * floors
    
    override fun floorArea(): Double {
        return super.floorArea() * floors
    }
}
